import{_ as s,V as a,W as n,X as e,Y as l,Z as i}from"./framework-7ae5e03a.js";const t={},c=l("p",null,"使用Emscripten将C++编译到wasm，实现与js的交互",-1),d=i(`<h2 id="emscripten编译流程" tabindex="-1"><a class="header-anchor" href="#emscripten编译流程" aria-hidden="true">#</a> Emscripten编译流程</h2><p>emcc/em++能够将C/C++代码转换为所需要的LLVM-IR代码， Clang/LLVM（Fastcomp）能够将生成的LLVM-IR代码转换为ASM.js及WebAssembly代码， 而emsdk用来帮助我们管理工具链内部的不同版本的子集工具及依赖关系以及相关的用户编译设置。</p><h2 id="_1-安装emscripten-sdk" tabindex="-1"><a class="header-anchor" href="#_1-安装emscripten-sdk" aria-hidden="true">#</a> 1. 安装Emscripten SDK</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clone https://github.com/emscripten-core/emsdk.git
<span class="token builtin class-name">cd</span> emsdk
./emsdk <span class="token function">install</span> <span class="token number">1.39</span>.8
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>emsdk-1.39.8可以用于编译Qt5.15，已经过官方测试</p></div><h2 id="_2-激活" tabindex="-1"><a class="header-anchor" href="#_2-激活" aria-hidden="true">#</a> 2. 激活</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./emsdk activate <span class="token number">1.39</span>.8
<span class="token builtin class-name">source</span> ./emsdk_env.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-初步尝试" tabindex="-1"><a class="header-anchor" href="#_3-初步尝试" aria-hidden="true">#</a> 3. 初步尝试</h2><ul><li>源代码</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;&#39;Hello World&#39; from C++&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>编译</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>em++ hello.cc <span class="token parameter variable">-s</span> <span class="token assign-left variable">WASM</span><span class="token operator">=</span><span class="token number">1</span> <span class="token parameter variable">-o</span> hello.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>会生成hello.js和hello.wasm</p><ul><li>运行</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">node</span> hello.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>输出</li></ul><p><code>&#39;Hello World&#39; from C++</code></p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>本地运行需要安装nodejs</p></div>`,18);function r(o,p){return a(),n("div",null,[c,e(" more "),d])}const m=s(t,[["render",r],["__file","webassembly.html.vue"]]);export{m as default};
