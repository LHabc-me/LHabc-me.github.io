import{_ as a,V as s,W as e,X as n,Y as t,Z as o}from"./framework-7ae5e03a.js";const i={},c=t("p",null,"标准库中存在一些和编译器紧密关联的模板和函数，本文将依次列举",-1),p=o(`<h2 id="type-traits" tabindex="-1"><a class="header-anchor" href="#type-traits" aria-hidden="true">#</a> type_traits</h2><p><code>is_union</code>、<code>is_class</code>等判断类的区别的，判断是否是标准布局的，判断类的构造方式的，判断是否trivial的，判断是否是虚函数的，判断是否是空类的...</p><h2 id="std-initializer-list" tabindex="-1"><a class="header-anchor" href="#std-initializer-list" aria-hidden="true">#</a> std::initializer_list</h2><p>编译器看到被大括号包起来的东西，就会尝试将其转化成<code>initializer_list</code>类型，这也无法手工实现</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>    <span class="token keyword">auto</span> test <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> boolalpha <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">typeid</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">typeid</span><span class="token punctuation">(</span>initializer_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="类型相关" tabindex="-1"><a class="header-anchor" href="#类型相关" aria-hidden="true">#</a> 类型相关</h2><p>如<code>std::type_info</code></p><h2 id="可以实现但效率不高的" tabindex="-1"><a class="header-anchor" href="#可以实现但效率不高的" aria-hidden="true">#</a> 可以实现但效率不高的</h2><p>如<code>std::make_index_sequence</code>，手动实现要实例化n个模板</p><h2 id="其他" tabindex="-1"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h2><p><code>std::is_constant_evaluated</code> 判断是否在编译器调用<br><code>std::source_location</code> 获取源代码位置信息<br> 某些带着constexpr修饰但无法手工实现的函数，如<code>constexpr std::address_of</code></p>`,11);function r(d,l){return s(),e("div",null,[c,n(" more "),p])}const h=a(i,[["render",r],["__file","Compiler-built.html.vue"]]);export{h as default};
